import numpy as np
from matplotlib import pyplot as plt
from IPython.display import clear_output
plt.rcParams.update({'font.size': 15})


from photochem import __version__
print(__version__)

from photochem import EvoAtmosphere

# Imports extra utilities
import input_files
import utils

def custom_find_steady_state(pc):

    pc.initialize_robust_stepper(pc.wrk.usol) 
    fig,ax = plt.subplots(1,1,figsize=[6,5])

    while True:

        # plt.close()
        ax.cla()
        
        # Creates plot
        
        # This function returns the state of the atmosphere in dictionary
        sol = pc.mole_fraction_dict()

        # Plots species
        species = ['SO2','SO2aer','H2SO4','H2SO4aer', 'H2O','H2Oaer','CO2','CO2aer']
        #species = ['H2S','H2Saer','S8','S8aer', 'H2O','H2Oaer','CO2','CO2aer']
        for i,sp in enumerate(species):
            ax.plot(sol[sp], sol['pressure']/1e6, c='C'+str(i), label=sp)

            if sp+'aer' in pc.dat.species_names[:pc.dat.np]:
                ind = pc.dat.species_names.index(sp+'aer')
                saturation = pc.dat.particle_sat[ind].sat_pressure
                mix = [pc.var.cond_params[ind].RHc*saturation(T)/pc.wrk.pressure[i] for i,T in enumerate(pc.var.temperature)]
                ax.plot(mix, pc.wrk.pressure/1e6, c='C'+str(i), ls='--', alpha=0.7)

        # default settings
        ax.set_xscale('log')
        ax.set_yscale('log')
        ax.invert_yaxis()
        ax.grid(alpha=0.4)
        ax.set_xlim(1e-10,1)
        ax.set_ylabel('Pressure (bars)')
        ax.set_xlabel('Mixing ratio')
        ax.legend(ncol=1,bbox_to_anchor=(1,1.0),loc='upper left')
        ax.text(0.02, 1.04, 't = '+'%e s'%pc.wrk.tn, \
            size = 15,ha='left', va='bottom',transform=ax.transAxes)
        fig.tight_layout()
        ax.set_xlim(1e-20,1e3)

        # break
        # plt.show(block=False)
        plt.pause(0.05)
        # plt.draw()
        for i in range(50):
            give_up, converged = pc.robust_step()
            if give_up or converged:
                break
        if give_up or converged:
            break

def plot_atmosphere(pc):

    fig,ax = plt.subplots(1,1,figsize=[6,5])

    
    # This function returns the state of the atmosphere in dictionary
    sol = pc.mole_fraction_dict()

    # Plots species
    species = ['SO2','SO2aer','H2SO4','H2SO4aer','S8','S8aer', 'H2O','H2Oaer','CO2','CO2aer']
    for i,sp in enumerate(species):
        ax.plot(sol[sp], sol['pressure']/1e6, c='C'+str(i), label=sp)

        if sp+'aer' in pc.dat.species_names[:pc.dat.np]:
            ind = pc.dat.species_names.index(sp+'aer')
            saturation = pc.dat.particle_sat[ind].sat_pressure
            mix = [pc.var.cond_params[ind].RHc*saturation(T)/pc.wrk.pressure[i] for i,T in enumerate(pc.var.temperature)]
            ax.plot(mix, pc.wrk.pressure/1e6, c='C'+str(i), ls='--', alpha=0.7)

    # default settings
    ax.set_xscale('log')
    ax.set_yscale('log')
    ax.invert_yaxis()
    ax.grid(alpha=0.4)
    ax.set_xlim(1e-10,1)
    ax.set_ylabel('Pressure (bars)')
    ax.set_xlabel('Mixing ratio')
    ax.legend(ncol=1,bbox_to_anchor=(1,1.0),loc='upper left')
    ax.text(0.02, 1.04, 't = '+'%e s'%pc.wrk.tn, \
        size = 15,ha='left', va='bottom',transform=ax.transAxes)
    fig.tight_layout()
    ax.set_xlim(1e-20,1e3)

    plt.savefig('converged.png',dpi=150,bbox_inches='tight')


# Makes a reaction file
input_files.create_zahnle_HNOC()

pc = EvoAtmosphere(
    'zahnle_amars.yaml',
    'settings.yaml',
    'Sun_3.5Ga.txt',
    'atmosphere_init.txt'
)
P_CO2 = 0.3 # INPUT A PRESSURE HERE IN BARS

pc.var.verbose = 1
pc.var.atol = 1e-18
pc.var.autodiff = True
pc.var.upwind_molec_diff = True

# Sets surface 
pc.set_lower_bc('CO2',bc_type='press',press=P_CO2*1e6)

pc.update_vertical_grid(TOA_pressure=1e-7*1e6)

# Change particle free params
for i in range(pc.dat.np):
    pc.var.cond_params[i].smooth_factor = 10 # Bigger numbers help integration converge.
    pc.var.cond_params[i].k_evap = 100 # Evaporation rate constant
    pc.var.cond_params[i].k_cond = 100 # Condensation rate constant

#custom_find_steady_state(pc)
#pc.evolve()

#initial_conditions = pc.wrk.usol
#pc.initialize_robust_stepper(initial_conditions)
#for i in range(20):
#    give_up, converged = pc.robust_step()
    #print('Current time in integration: %e s'%pc.wrk.tn)

pc.evolve('atm_10s.txt',0 ,pc.wrk.usol,np.array([10.0]),overwrite=True)
from photochem.io import evo_read_evolve_output

# Read the evolve output file
filename = 'atm_10s.txt'  # The file generated by pc.evolve
sol = evo_read_evolve_output(filename)

print(sol.keys())

# Extract the species names and find the index of 'SO2aer'
species_names = sol['species_names']
print(species_names)
so2aer_index = species_names.index('CO2')  # Get the index of SO2aer in the species list

# Extract the heights (altitudes) and the corresponding usol values for SO2aer
altitudes = sol['alt']  # Heights in km
usol_so2aer = sol['usol'][so2aer_index, :, :]  # Extract SO2aer number densities for all heights and times

# Print the SO2aer mixing ratio at each height for the last time step
print("SO2aer mixing ratio at each height (last time step):")
for i, altitude in enumerate(altitudes):
    print(f"Height: {altitude[0]} km, SO2aer: {usol_so2aer[i, -1]} molecules/cm^3")


'''

pc.out2atmosphere_txt('atmosphere_converged.txt',overwrite=True)

plot_atmosphere(pc)

fluxes = pc.gas_fluxes()[0]
print('%e'%fluxes['SO2'])

pl = pc.production_and_loss('H2SO4',pc.wrk.usol)
for i in range(len(pl.production_rx)):
    print('{:30}'.format(pl.production_rx[i])+'%e'%pl.integrated_production[i])

sol = pc.mole_fraction_dict()

plt.rcParams.update({'font.size': 15})
fig, ax = plt.subplots(1, 1, figsize=[10, 5])

for i in range(2):
    ax.plot(pl.production[:,i],sol['pressure']/1e6,label=pl.production_rx[i])
    
for i in range(2):
    ax.plot(pl.loss[:,i],sol['pressure']/1e6,'--',label=pl.loss_rx[i])

ax.set_xscale('log')
ax.set_yscale('log')
ax.invert_yaxis()
ax.grid(alpha=0.4)
ax.set_ylabel('Pressure (bar)')
ax.set_xlabel('Production and Loss (molecules/cm^3/s)')
ax.set_xlim(1e-10,1e5)
ax.legend(ncol=2,bbox_to_anchor=(0.5,1.05),loc='lower center')
plt.tight_layout()
plt.savefig('pl.png', bbox_inches='tight')

'''